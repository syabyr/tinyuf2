# Espressif IDF use CMake build system, this add wrapper target to call idf.py

.PHONY: all build clean flash monitor erase
.DEFAULT_GOAL := all

# Build directory
BUILD = _build/$(BOARD)
BIN = _bin/$(BOARD)
TOP = ../..

ifdef SERIAL
SERIAL_OPT = --port $(SERIAL)
endif

BOARD_CMAKE := $(file < boards/$(BOARD)/board.cmake)
ifneq ($(findstring esp32s2,$(BOARD_CMAKE)),)
	IDF_TARGET = esp32s2
else
ifneq ($(findstring esp32s3,$(BOARD_CMAKE)),)
	IDF_TARGET = esp32s3
endif
endif

all:
	idf.py -B$(BUILD) -DBOARD=$(BOARD) build

build: all

fullclean:
	idf.py -B$(BUILD) -DBOARD=$(BOARD) fullclean
	@rm -rf $(BIN)
	@rm -rf $(SELF_BUILD)

app bootloader clean flash bootloader-flash app-flash erase-flash monitor dfu-flash dfu size size-components size-files:
	idf.py -B$(BUILD) -DBOARD=$(BOARD) $(SERIAL_OPT) $@

# combined.bin is POST build step, generated by cmake app target
$(BUILD)/combined.bin: app
combined-flash: $(BUILD)/combined.bin
	esptool.py --chip $(IDF_TARGET) write_flash 0x0 $<

# Self_update is a sub/external project, will be built by cmake's all target
SELF_BUILD = ${BUILD}/self_update

# Artifacts is generated as Cmake post build
